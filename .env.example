# Server Configuration
PORT=3000
NODE_ENV=production

# CORS Configuration
ALLOWED_ORIGINS=https://yourdomain.com,https://app.yourdomain.com

# Security Configuration
# Generate strong API keys with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
VALID_API_KEYS=your-secret-api-key-1,your-secret-api-key-2

# IP Whitelist (optional, comma-separated IPs)
# ALLOWED_IPS=192.168.1.100,203.0.113.0

# Google Service Account Configuration
# Option 1: Use service account key file path
GOOGLE_SERVICE_ACCOUNT_KEY_FILE=/path/to/your/service-account-key.json
# we have connected with developers@foodiestrip.com!!! created a new service account and downloaded the json file and put it in config folder
# and shared on google calendar with that mail..


# Option 2: Use inline service account credentials (for deployment)
# GOOGLE_SERVICE_ACCOUNT_CREDENTIALS={"type":"service_account","project_id":"your-project-id",...}

# Example Google Service Account Credentials Structure:
# {
#   "type": "service_account",
#   "project_id": "your-project-id",
#   "private_key_id": "key-id",
#   "private_key": "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n",
#   "client_email": "your-service-account@your-project.iam.gserviceaccount.com",
#   "client_id": "client-id",
#   "auth_uri": "https://accounts.google.com/o/oauth2/auth",
#   "token_uri": "https://oauth2.googleapis.com/token",
#   "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
#   "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/your-service-account%40your-project.iam.gserviceaccount.com"
# }